generator client {
  provider = "prisma-client-js"
}

// SQLite
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// PostgreSQL
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// User Data
model UserType {
  id         Int        @id @default(autoincrement())
  type_name  String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  auth_user  AuthUser[]

  @@map("user_type")
}

model Department {
  id                     String        @id @default(uuid())
  department_name        String
  department_description String
  telephone              String?
  email                  String?
  url                    String?
  user_profile           UserProfile[]

  @@map("department")
}

model UserProfile {
  id                 String     @id @default(uuid())
  email              String     @unique
  name               String
  title              String
  bio                String
  profile_id         String     @unique
  auth_user          AuthUser   @relation(fields: [profile_id], references: [id])
  department_id      String
  department         Department @relation(fields: [department_id], references: [id])
  subject_specialist Subject[]

  @@map("user_profile")
}

// User Auth
model AuthUser {
  id           String        @id @unique
  created_at   DateTime      @default(now())
  username     String        @unique
  password     String
  user_type_id Int?
  user_type    UserType?     @relation(fields: [user_type_id], references: [id])
  user_profile UserProfile?
  auth_session AuthSession[]
  auth_key     AuthKey[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

// Subject
model Discipline {
  id          Int       @id @default(autoincrement())
  code        String
  discipline  String
  description String
  faculty     String
  subjects    Subject[]

  @@map("discipline")
}

model Subject {
  id                 Int          @id @unique @default(autoincrement())
  subject_name       String
  subject_slug       String       @unique
  active             String
  redirect_url       String
  header             String?
  description        String?
  keywords           String?
  type               String?
  created_at         DateTime     @default(now())
  last_modified      DateTime     @updatedAt
  instructor         String?
  subject_specialist UserProfile? @relation(references: [id], fields: [instructor])
  discipline_id      Int?
  Discipline         Discipline?  @relation(references: [id], fields: [discipline_id])

  @@index([subject_slug])
  @@map("subject")
}
